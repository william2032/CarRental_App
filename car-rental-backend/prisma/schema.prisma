generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(cuid())
  email          String               @unique
  password       String
  role           UserRole             @default(CUSTOMER)
  name           String
  phone          String?
  profilePicture String?
  city           String?
  country        String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  // relations
  resetTokens    PasswordResetToken[]
  bookings       Booking[]
  reviews        Review[]

  @@map("users")
}

model VehicleImage {
  id        String  @id @default(uuid())
  url       String
  isPrimary Boolean @default(false)
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
}

model Vehicle {
  id           String           @id @default(cuid())
  make         String
  model        String
  year         Int
  fuelType     FuelType
  seats        Int              @default(5)
  category     VehicleType
  transmission TransmissionType
  pricePerDay  Decimal          @db.Decimal(10, 2)
  pricePerHour Decimal?         @db.Decimal(10, 2)
  mileage      Int?
  features     String[]
  images       VehicleImage[]
  availability Availability[]
  isAvailable  Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  condition    VehicleCondition @default(EXCELLENT)
  locationId   String
  location     Location         @relation(fields: [locationId], references: [id])

  bookings Booking[]
  reviews  Review[]

  @@map("vehicles")
}

model Availability {
  id          String   @id @default(uuid())
  vehicleId   String
  startDate   DateTime
  endDate     DateTime
  isAvailable Boolean  @default(true)
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
}

model Location {
  id        String   @id @default(cuid())
  name      String
  address   String
  city      String
  country   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vehicles Vehicle[]
  bookings Booking[]

  @@map("locations")
}

model Booking {
  id            String @id @default(cuid())
  bookingNumber String @unique @default(cuid())

  // user and vehicle
  userId               String
  user                 User                   @relation(fields: [userId], references: [id])
  vehicleId            String
  vehicle              Vehicle                @relation(fields: [vehicleId], references: [id])
  // dates and time and pickupstations
  startDate            DateTime
  endDate              DateTime
  pickupLocation       String
  returnLocation       String
  // pricing
  baseAmount           Decimal                @db.Decimal(10, 2)
  discountAmount       Decimal                @default(0) @db.Decimal(10, 2)
  totalAmount          Decimal                @db.Decimal(10, 2)
  // status
  status               BookingStatus          @default(PENDING)
  type                 BookingType            @default(REQUEST)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  payment              PaymentMethod?
  bookingStatusHistory BookingStatusHistory[]
  Location             Location?              @relation(fields: [locationId], references: [id])
  locationId           String?

  @@map("bookings")
}

model PaymentMethod {
  id        String  @id @default(cuid())
  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])

  amount Decimal       @db.Decimal(10, 2)
  status PaymentStatus @default(PENDING)

  type          PaymentMethodType
  transactionId String?
  // gatewayResponse String?       // JSON response from payment gateway
  // Timestamps
  paidAt        DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("payments")
}

model Review {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  rating    Int      @db.SmallInt // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  @@map("reviews")
}

model Coupon {
  id          String  @id @default(cuid())
  code        String  @unique
  name        String
  description String?

  discountType    DiscountType
  discountValue   Decimal      @db.Decimal(10, 2)
  minimumAmount   Decimal?     @db.Decimal(10, 2)
  maximumDiscount Decimal?     @db.Decimal(10, 2)

  usageLimit Int?
  usedCount  Int  @default(0)

  isActive  Boolean  @default(true)
  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupons")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@map("password_reset_tokens")
}

enum UserRole {
  ADMIN
  AGENT
  CUSTOMER
}

enum VehicleType {
  SEDAN
  SUV
  SPORT
  CONVERTIBLE
  LUXURY
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  CVT
}

enum VehicleCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ACTIVE
  REJECTED
}

enum BookingType {
  INSTANT
  REQUEST
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

model BookingStatusHistory {
  id        String        @id @default(cuid())
  bookingId String
  booking   Booking       @relation(fields: [bookingId], references: [id])
  status    BookingStatus
  changedBy String? // User ID who changed the status
  reason    String?
  createdAt DateTime      @default(now())

  @@map("booking_status_history")
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
  MPESA
  CASH
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
